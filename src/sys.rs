/* automatically generated by rust-bindgen */

pub const _STDINT_H: ::cty::c_uint = 1;
pub const _FEATURES_H: ::cty::c_uint = 1;
pub const _DEFAULT_SOURCE: ::cty::c_uint = 1;
pub const __USE_ISOC11: ::cty::c_uint = 1;
pub const __USE_ISOC99: ::cty::c_uint = 1;
pub const __USE_ISOC95: ::cty::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::cty::c_uint = 1;
pub const _POSIX_SOURCE: ::cty::c_uint = 1;
pub const _POSIX_C_SOURCE: ::cty::c_uint = 200809;
pub const __USE_POSIX: ::cty::c_uint = 1;
pub const __USE_POSIX2: ::cty::c_uint = 1;
pub const __USE_POSIX199309: ::cty::c_uint = 1;
pub const __USE_POSIX199506: ::cty::c_uint = 1;
pub const __USE_XOPEN2K: ::cty::c_uint = 1;
pub const __USE_XOPEN2K8: ::cty::c_uint = 1;
pub const _ATFILE_SOURCE: ::cty::c_uint = 1;
pub const __USE_MISC: ::cty::c_uint = 1;
pub const __USE_ATFILE: ::cty::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::cty::c_uint = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: ::cty::c_uint = 0;
pub const _STDC_PREDEF_H: ::cty::c_uint = 1;
pub const __STDC_IEC_559__: ::cty::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::cty::c_uint = 1;
pub const __STDC_ISO_10646__: ::cty::c_uint = 201706;
pub const __STDC_NO_THREADS__: ::cty::c_uint = 1;
pub const __GNU_LIBRARY__: ::cty::c_uint = 6;
pub const __GLIBC__: ::cty::c_uint = 2;
pub const __GLIBC_MINOR__: ::cty::c_uint = 26;
pub const _SYS_CDEFS_H: ::cty::c_uint = 1;
pub const __glibc_c99_flexarr_available: ::cty::c_uint = 1;
pub const __WORDSIZE: ::cty::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::cty::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::cty::c_uint = 64;
pub const __HAVE_GENERIC_SELECTION: ::cty::c_uint = 1;
pub const __GLIBC_USE_LIB_EXT2: ::cty::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: ::cty::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: ::cty::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: ::cty::c_uint = 0;
pub const _BITS_TYPES_H: ::cty::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::cty::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::cty::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::cty::c_uint = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: ::cty::c_uint = 1;
pub const __FD_SETSIZE: ::cty::c_uint = 1024;
pub const _BITS_WCHAR_H: ::cty::c_uint = 1;
pub const _BITS_STDINT_INTN_H: ::cty::c_uint = 1;
pub const _BITS_STDINT_UINTN_H: ::cty::c_uint = 1;
pub const INT8_MIN: ::cty::c_int = -128;
pub const INT16_MIN: ::cty::c_int = -32768;
pub const INT32_MIN: ::cty::c_int = -2147483648;
pub const INT8_MAX: ::cty::c_uint = 127;
pub const INT16_MAX: ::cty::c_uint = 32767;
pub const INT32_MAX: ::cty::c_uint = 2147483647;
pub const UINT8_MAX: ::cty::c_uint = 255;
pub const UINT16_MAX: ::cty::c_uint = 65535;
pub const UINT32_MAX: ::cty::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::cty::c_int = -128;
pub const INT_LEAST16_MIN: ::cty::c_int = -32768;
pub const INT_LEAST32_MIN: ::cty::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::cty::c_uint = 127;
pub const INT_LEAST16_MAX: ::cty::c_uint = 32767;
pub const INT_LEAST32_MAX: ::cty::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::cty::c_uint = 255;
pub const UINT_LEAST16_MAX: ::cty::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::cty::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::cty::c_int = -128;
pub const INT_FAST16_MIN: ::cty::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::cty::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::cty::c_uint = 127;
pub const INT_FAST16_MAX: ::cty::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::cty::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::cty::c_uint = 255;
pub const UINT_FAST16_MAX: ::cty::c_int = -1;
pub const UINT_FAST32_MAX: ::cty::c_int = -1;
pub const INTPTR_MIN: ::cty::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::cty::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::cty::c_int = -1;
pub const PTRDIFF_MIN: ::cty::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::cty::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::cty::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::cty::c_uint = 2147483647;
pub const SIZE_MAX: ::cty::c_int = -1;
pub const WINT_MIN: ::cty::c_uint = 0;
pub const WINT_MAX: ::cty::c_uint = 4294967295;
pub type wchar_t = ::cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::cty::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}
pub type __u_char = ::cty::c_uchar;
pub type __u_short = ::cty::c_ushort;
pub type __u_int = ::cty::c_uint;
pub type __u_long = ::cty::c_ulong;
pub type __int8_t = ::cty::c_schar;
pub type __uint8_t = ::cty::c_uchar;
pub type __int16_t = ::cty::c_short;
pub type __uint16_t = ::cty::c_ushort;
pub type __int32_t = ::cty::c_int;
pub type __uint32_t = ::cty::c_uint;
pub type __int64_t = ::cty::c_long;
pub type __uint64_t = ::cty::c_ulong;
pub type __quad_t = ::cty::c_long;
pub type __u_quad_t = ::cty::c_ulong;
pub type __intmax_t = ::cty::c_long;
pub type __uintmax_t = ::cty::c_ulong;
pub type __dev_t = ::cty::c_ulong;
pub type __uid_t = ::cty::c_uint;
pub type __gid_t = ::cty::c_uint;
pub type __ino_t = ::cty::c_ulong;
pub type __ino64_t = ::cty::c_ulong;
pub type __mode_t = ::cty::c_uint;
pub type __nlink_t = ::cty::c_ulong;
pub type __off_t = ::cty::c_long;
pub type __off64_t = ::cty::c_long;
pub type __pid_t = ::cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::cty::c_int; 2usize],
}
pub type __clock_t = ::cty::c_long;
pub type __rlim_t = ::cty::c_ulong;
pub type __rlim64_t = ::cty::c_ulong;
pub type __id_t = ::cty::c_uint;
pub type __time_t = ::cty::c_long;
pub type __useconds_t = ::cty::c_uint;
pub type __suseconds_t = ::cty::c_long;
pub type __daddr_t = ::cty::c_int;
pub type __key_t = ::cty::c_int;
pub type __clockid_t = ::cty::c_int;
pub type __timer_t = *mut ::cty::c_void;
pub type __blksize_t = ::cty::c_long;
pub type __blkcnt_t = ::cty::c_long;
pub type __blkcnt64_t = ::cty::c_long;
pub type __fsblkcnt_t = ::cty::c_ulong;
pub type __fsblkcnt64_t = ::cty::c_ulong;
pub type __fsfilcnt_t = ::cty::c_ulong;
pub type __fsfilcnt64_t = ::cty::c_ulong;
pub type __fsword_t = ::cty::c_long;
pub type __ssize_t = ::cty::c_long;
pub type __syscall_slong_t = ::cty::c_long;
pub type __syscall_ulong_t = ::cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::cty::c_char;
pub type __intptr_t = ::cty::c_long;
pub type __socklen_t = ::cty::c_uint;
pub type __sig_atomic_t = ::cty::c_int;
pub type int_least8_t = ::cty::c_schar;
pub type int_least16_t = ::cty::c_short;
pub type int_least32_t = ::cty::c_int;
pub type int_least64_t = ::cty::c_long;
pub type uint_least8_t = ::cty::c_uchar;
pub type uint_least16_t = ::cty::c_ushort;
pub type uint_least32_t = ::cty::c_uint;
pub type uint_least64_t = ::cty::c_ulong;
pub type int_fast8_t = ::cty::c_schar;
pub type int_fast16_t = ::cty::c_long;
pub type int_fast32_t = ::cty::c_long;
pub type int_fast64_t = ::cty::c_long;
pub type uint_fast8_t = ::cty::c_uchar;
pub type uint_fast16_t = ::cty::c_ulong;
pub type uint_fast32_t = ::cty::c_ulong;
pub type uint_fast64_t = ::cty::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const blake2s_constant_BLAKE2S_BLOCKBYTES: blake2s_constant = 64;
pub const blake2s_constant_BLAKE2S_OUTBYTES: blake2s_constant = 32;
pub const blake2s_constant_BLAKE2S_KEYBYTES: blake2s_constant = 32;
pub const blake2s_constant_BLAKE2S_SALTBYTES: blake2s_constant = 8;
pub const blake2s_constant_BLAKE2S_PERSONALBYTES: blake2s_constant = 8;
pub type blake2s_constant = ::cty::c_uint;
pub const blake2b_constant_BLAKE2B_BLOCKBYTES: blake2b_constant = 128;
pub const blake2b_constant_BLAKE2B_OUTBYTES: blake2b_constant = 64;
pub const blake2b_constant_BLAKE2B_KEYBYTES: blake2b_constant = 64;
pub const blake2b_constant_BLAKE2B_SALTBYTES: blake2b_constant = 16;
pub const blake2b_constant_BLAKE2B_PERSONALBYTES: blake2b_constant = 16;
pub type blake2b_constant = ::cty::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blake2s_state__ {
    pub h: [u32; 8usize],
    pub t: [u32; 2usize],
    pub f: [u32; 2usize],
    pub buf: [u8; 64usize],
    pub buflen: usize,
    pub outlen: usize,
    pub last_node: u8,
}
pub type blake2s_state = blake2s_state__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blake2b_state__ {
    pub h: [u64; 8usize],
    pub t: [u64; 2usize],
    pub f: [u64; 2usize],
    pub buf: [u8; 128usize],
    pub buflen: usize,
    pub outlen: usize,
    pub last_node: u8,
}
pub type blake2b_state = blake2b_state__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blake2sp_state__ {
    pub S: [[blake2s_state; 1usize]; 8usize],
    pub R: [blake2s_state; 1usize],
    pub buf: [u8; 512usize],
    pub buflen: usize,
    pub outlen: usize,
}
pub type blake2sp_state = blake2sp_state__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blake2bp_state__ {
    pub S: [[blake2b_state; 1usize]; 4usize],
    pub R: [blake2b_state; 1usize],
    pub buf: [u8; 512usize],
    pub buflen: usize,
    pub outlen: usize,
}
pub type blake2bp_state = blake2bp_state__;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct blake2s_param__ {
    pub digest_length: u8,
    pub key_length: u8,
    pub fanout: u8,
    pub depth: u8,
    pub leaf_length: u32,
    pub node_offset: u32,
    pub xof_length: u16,
    pub node_depth: u8,
    pub inner_length: u8,
    pub salt: [u8; 8usize],
    pub personal: [u8; 8usize],
}
pub type blake2s_param = blake2s_param__;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct blake2b_param__ {
    pub digest_length: u8,
    pub key_length: u8,
    pub fanout: u8,
    pub depth: u8,
    pub leaf_length: u32,
    pub node_offset: u32,
    pub xof_length: u32,
    pub node_depth: u8,
    pub inner_length: u8,
    pub reserved: [u8; 14usize],
    pub salt: [u8; 16usize],
    pub personal: [u8; 16usize],
}
pub type blake2b_param = blake2b_param__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blake2xs_state__ {
    pub S: [blake2s_state; 1usize],
    pub P: [blake2s_param; 1usize],
}
pub type blake2xs_state = blake2xs_state__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blake2xb_state__ {
    pub S: [blake2b_state; 1usize],
    pub P: [blake2b_param; 1usize],
}
pub type blake2xb_state = blake2xb_state__;
pub const BLAKE2_DUMMY_1: _bindgen_ty_1 = 1;
pub const BLAKE2_DUMMY_2: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::cty::c_uint;
extern "C" {
    pub fn blake2s_init(S: *mut blake2s_state, outlen: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2s_init_key(
        S: *mut blake2s_state,
        outlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2s_init_param(S: *mut blake2s_state, P: *const blake2s_param) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2s_update(
        S: *mut blake2s_state,
        in_: *const ::cty::c_void,
        inlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2s_final(
        S: *mut blake2s_state,
        out: *mut ::cty::c_void,
        outlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2b_init(S: *mut blake2b_state, outlen: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2b_init_key(
        S: *mut blake2b_state,
        outlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2b_init_param(S: *mut blake2b_state, P: *const blake2b_param) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2b_update(
        S: *mut blake2b_state,
        in_: *const ::cty::c_void,
        inlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2b_final(
        S: *mut blake2b_state,
        out: *mut ::cty::c_void,
        outlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2sp_init(S: *mut blake2sp_state, outlen: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2sp_init_key(
        S: *mut blake2sp_state,
        outlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2sp_update(
        S: *mut blake2sp_state,
        in_: *const ::cty::c_void,
        inlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2sp_final(
        S: *mut blake2sp_state,
        out: *mut ::cty::c_void,
        outlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2bp_init(S: *mut blake2bp_state, outlen: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2bp_init_key(
        S: *mut blake2bp_state,
        outlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2bp_update(
        S: *mut blake2bp_state,
        in_: *const ::cty::c_void,
        inlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2bp_final(
        S: *mut blake2bp_state,
        out: *mut ::cty::c_void,
        outlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2xs_init(S: *mut blake2xs_state, outlen: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2xs_init_key(
        S: *mut blake2xs_state,
        outlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2xs_update(
        S: *mut blake2xs_state,
        in_: *const ::cty::c_void,
        inlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2xs_final(
        S: *mut blake2xs_state,
        out: *mut ::cty::c_void,
        outlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2xb_init(S: *mut blake2xb_state, outlen: usize) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2xb_init_key(
        S: *mut blake2xb_state,
        outlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2xb_update(
        S: *mut blake2xb_state,
        in_: *const ::cty::c_void,
        inlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2xb_final(
        S: *mut blake2xb_state,
        out: *mut ::cty::c_void,
        outlen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2s(
        out: *mut ::cty::c_void,
        outlen: usize,
        in_: *const ::cty::c_void,
        inlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2b(
        out: *mut ::cty::c_void,
        outlen: usize,
        in_: *const ::cty::c_void,
        inlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2sp(
        out: *mut ::cty::c_void,
        outlen: usize,
        in_: *const ::cty::c_void,
        inlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2bp(
        out: *mut ::cty::c_void,
        outlen: usize,
        in_: *const ::cty::c_void,
        inlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2xs(
        out: *mut ::cty::c_void,
        outlen: usize,
        in_: *const ::cty::c_void,
        inlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2xb(
        out: *mut ::cty::c_void,
        outlen: usize,
        in_: *const ::cty::c_void,
        inlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn blake2(
        out: *mut ::cty::c_void,
        outlen: usize,
        in_: *const ::cty::c_void,
        inlen: usize,
        key: *const ::cty::c_void,
        keylen: usize,
    ) -> ::cty::c_int;
}
